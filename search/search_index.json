{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Reference","text":""},{"location":"#frame","title":"Frame","text":""},{"location":"#hemline.frame.Frame","title":"hemline.frame.Frame","text":"Source code in <code>hemline/frame.py</code> <pre><code>class Frame:\n    def __init__(\n        self,\n        color: Color | None = None,\n        text_alignment: Alignment = DEFAULT_TEXT_ALIGNMENT,\n        alignment: Alignment = DEFAULT_FRAME_ALIGNMENT,\n        theme: Theme = DEFAULT_THEME,\n        horizontal_padding: int = DEFAULT_HORIZONTAL_PADDING,\n        vertical_padding: int = DEFAULT_VERTICAL_PADDING,\n        outer_width: int = DEFAULT_OUTER_WIDTH,\n        container_width: int | None = None,\n        colorize: Callable[[str], str] | None = None,\n        wrap: Callable[[str, int], str] = DEFAULT_TEXT_WRAP,\n    ) -&gt; None:\n        \"\"\"\n        Parameters:\n            color: The color of the frame. Use this for colorization out\n                of the box. For more sophistaced options, you can pass a\n                colorization function to the parameter `colorize`.\n\n            text_alignment: The alignment of the text inside the frame.\n\n            alignment: The alignment of the frame inside the container.\n\n            theme: The appearance of the frameline. Choose one the predefined\n                themes from hemline.themes or build your own instance of\n                hemline.themes.Theme.\n\n            horizontal_padding: The number of whitespace characters used for\n                horizontal padding.\n\n            vertical_padding: The number of blank lines used for vertical\n                padding.\n\n            outer_width: The outer width of the Frame, including horizontal\n                padding and the frame itself.\n\n            container_width: The width of an imgainary container for the frame,\n                resorts to the width of the terminal, if none is provided.\n\n            colorize: A function to apply your custom colorization. Must take a\n                string return the colorized string. Passing this will override\n                any value provided to `color` parameter.\n\n            wrap: A function to apply your custom wrapping logic. Must take a\n                string and the width and return the wrapped string.\n        \"\"\"\n        self.text_alignment = text_alignment\n        self.alignment = alignment\n        self.theme = theme\n        self.horizontal_padding = horizontal_padding\n        self.vertical_padding = vertical_padding\n        self.outer_width = outer_width\n        self.container_width = container_width\n        if not color:\n            self.colorize = colorize\n        else:\n            self.colorize = colorize or partial(default_colorize, color=color)\n        self.wrap = wrap\n\n    @property\n    def effective_container_width(self) -&gt; int:\n        terminal_width = get_terminal_width()\n        if self.container_width is None:\n            return terminal_width\n\n        return min(self.container_width, terminal_width)\n\n    @property\n    def effective_outer_width(self) -&gt; int:\n        return min(self.outer_width, self.effective_container_width)\n\n    @property\n    def inner_width(self) -&gt; int:\n        return self.effective_outer_width - 2\n\n    @property\n    def text_width(self) -&gt; int:\n        return self.inner_width - 2 * self.horizontal_padding\n\n    @property\n    def vertical_border(self) -&gt; str:\n        character = self.theme.vertical\n        character = self.colorize(character) if self.colorize else character\n        return character\n\n    def format(self, text: str) -&gt; str:\n        \"\"\"\n        Parameters:\n            text: The text to frame.\n        \"\"\"\n        text = self.wrap(text, self.text_width)\n        raw_lines = text.split(\"\\n\")\n        raw_lines = (\n            [\"\"] * self.vertical_padding\n            + raw_lines\n            + [\"\"] * self.vertical_padding\n        )\n        top_line = self._border_line(\n            left=self.theme.top_left,\n            right=self.theme.top_right,\n        )\n        bottom_line = self._border_line(\n            left=self.theme.bottom_left,\n            right=self.theme.bottom_right,\n        )\n        framed_lines = [self._framed_line(text=line) for line in raw_lines]\n        return \"\\n\".join([top_line] + framed_lines + [bottom_line])\n\n    def _pad_line(self, line: str) -&gt; str:\n        return (\n            \" \" * self.horizontal_padding + line + \" \" * self.horizontal_padding\n        )\n\n    def _apply_vertical_border(self, line: str) -&gt; str:\n        return self.vertical_border + line + self.vertical_border\n\n    def _align_text(self, line: str) -&gt; str:\n        return get_alignment_method(self.text_alignment)(line, self.inner_width)\n\n    def _align_framed_line(self, line: str) -&gt; str:\n        return get_alignment_method(self.alignment)(\n            line, self.effective_container_width\n        )\n\n    def _border_line(\n        self,\n        left: str,\n        right: str,\n    ) -&gt; str:\n        line = left + self.inner_width * self.theme.horizontal + right\n        line = self._align_framed_line(line)\n        if self.colorize:\n            return self.colorize(line)\n        return line\n\n    def _framed_line(self, text: str) -&gt; str:\n        text = self._pad_line(text)\n        text = self._align_text(text)\n        text = self._apply_vertical_border(text)\n        text = self._align_framed_line(text)\n        return text\n</code></pre>"},{"location":"#hemline.frame.Frame.__init__","title":"__init__","text":"<pre><code>__init__(\n    color=None,\n    text_alignment=DEFAULT_TEXT_ALIGNMENT,\n    alignment=DEFAULT_FRAME_ALIGNMENT,\n    theme=DEFAULT_THEME,\n    horizontal_padding=DEFAULT_HORIZONTAL_PADDING,\n    vertical_padding=DEFAULT_VERTICAL_PADDING,\n    outer_width=DEFAULT_OUTER_WIDTH,\n    container_width=None,\n    colorize=None,\n    wrap=DEFAULT_TEXT_WRAP,\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>Color | None</code> <p>The color of the frame. Use this for colorization out of the box. For more sophistaced options, you can pass a colorization function to the parameter <code>colorize</code>.</p> <code>None</code> <code>text_alignment</code> <code>Alignment</code> <p>The alignment of the text inside the frame.</p> <code>DEFAULT_TEXT_ALIGNMENT</code> <code>alignment</code> <code>Alignment</code> <p>The alignment of the frame inside the container.</p> <code>DEFAULT_FRAME_ALIGNMENT</code> <code>theme</code> <code>Theme</code> <p>The appearance of the frameline. Choose one the predefined themes from hemline.themes or build your own instance of hemline.themes.Theme.</p> <code>DEFAULT_THEME</code> <code>horizontal_padding</code> <code>int</code> <p>The number of whitespace characters used for horizontal padding.</p> <code>DEFAULT_HORIZONTAL_PADDING</code> <code>vertical_padding</code> <code>int</code> <p>The number of blank lines used for vertical padding.</p> <code>DEFAULT_VERTICAL_PADDING</code> <code>outer_width</code> <code>int</code> <p>The outer width of the Frame, including horizontal padding and the frame itself.</p> <code>DEFAULT_OUTER_WIDTH</code> <code>container_width</code> <code>int | None</code> <p>The width of an imgainary container for the frame, resorts to the width of the terminal, if none is provided.</p> <code>None</code> <code>colorize</code> <code>Callable[[str], str] | None</code> <p>A function to apply your custom colorization. Must take a string return the colorized string. Passing this will override any value provided to <code>color</code> parameter.</p> <code>None</code> <code>wrap</code> <code>Callable[[str, int], str]</code> <p>A function to apply your custom wrapping logic. Must take a string and the width and return the wrapped string.</p> <code>DEFAULT_TEXT_WRAP</code> Source code in <code>hemline/frame.py</code> <pre><code>def __init__(\n    self,\n    color: Color | None = None,\n    text_alignment: Alignment = DEFAULT_TEXT_ALIGNMENT,\n    alignment: Alignment = DEFAULT_FRAME_ALIGNMENT,\n    theme: Theme = DEFAULT_THEME,\n    horizontal_padding: int = DEFAULT_HORIZONTAL_PADDING,\n    vertical_padding: int = DEFAULT_VERTICAL_PADDING,\n    outer_width: int = DEFAULT_OUTER_WIDTH,\n    container_width: int | None = None,\n    colorize: Callable[[str], str] | None = None,\n    wrap: Callable[[str, int], str] = DEFAULT_TEXT_WRAP,\n) -&gt; None:\n    \"\"\"\n    Parameters:\n        color: The color of the frame. Use this for colorization out\n            of the box. For more sophistaced options, you can pass a\n            colorization function to the parameter `colorize`.\n\n        text_alignment: The alignment of the text inside the frame.\n\n        alignment: The alignment of the frame inside the container.\n\n        theme: The appearance of the frameline. Choose one the predefined\n            themes from hemline.themes or build your own instance of\n            hemline.themes.Theme.\n\n        horizontal_padding: The number of whitespace characters used for\n            horizontal padding.\n\n        vertical_padding: The number of blank lines used for vertical\n            padding.\n\n        outer_width: The outer width of the Frame, including horizontal\n            padding and the frame itself.\n\n        container_width: The width of an imgainary container for the frame,\n            resorts to the width of the terminal, if none is provided.\n\n        colorize: A function to apply your custom colorization. Must take a\n            string return the colorized string. Passing this will override\n            any value provided to `color` parameter.\n\n        wrap: A function to apply your custom wrapping logic. Must take a\n            string and the width and return the wrapped string.\n    \"\"\"\n    self.text_alignment = text_alignment\n    self.alignment = alignment\n    self.theme = theme\n    self.horizontal_padding = horizontal_padding\n    self.vertical_padding = vertical_padding\n    self.outer_width = outer_width\n    self.container_width = container_width\n    if not color:\n        self.colorize = colorize\n    else:\n        self.colorize = colorize or partial(default_colorize, color=color)\n    self.wrap = wrap\n</code></pre>"},{"location":"#hemline.frame.Frame.format","title":"format","text":"<pre><code>format(text)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to frame.</p> required Source code in <code>hemline/frame.py</code> <pre><code>def format(self, text: str) -&gt; str:\n    \"\"\"\n    Parameters:\n        text: The text to frame.\n    \"\"\"\n    text = self.wrap(text, self.text_width)\n    raw_lines = text.split(\"\\n\")\n    raw_lines = (\n        [\"\"] * self.vertical_padding\n        + raw_lines\n        + [\"\"] * self.vertical_padding\n    )\n    top_line = self._border_line(\n        left=self.theme.top_left,\n        right=self.theme.top_right,\n    )\n    bottom_line = self._border_line(\n        left=self.theme.bottom_left,\n        right=self.theme.bottom_right,\n    )\n    framed_lines = [self._framed_line(text=line) for line in raw_lines]\n    return \"\\n\".join([top_line] + framed_lines + [bottom_line])\n</code></pre>"},{"location":"#hemline.frame.Frame.__init__","title":"hemline.frame.Frame.__init__","text":"<pre><code>__init__(\n    color=None,\n    text_alignment=DEFAULT_TEXT_ALIGNMENT,\n    alignment=DEFAULT_FRAME_ALIGNMENT,\n    theme=DEFAULT_THEME,\n    horizontal_padding=DEFAULT_HORIZONTAL_PADDING,\n    vertical_padding=DEFAULT_VERTICAL_PADDING,\n    outer_width=DEFAULT_OUTER_WIDTH,\n    container_width=None,\n    colorize=None,\n    wrap=DEFAULT_TEXT_WRAP,\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>Color | None</code> <p>The color of the frame. Use this for colorization out of the box. For more sophistaced options, you can pass a colorization function to the parameter <code>colorize</code>.</p> <code>None</code> <code>text_alignment</code> <code>Alignment</code> <p>The alignment of the text inside the frame.</p> <code>DEFAULT_TEXT_ALIGNMENT</code> <code>alignment</code> <code>Alignment</code> <p>The alignment of the frame inside the container.</p> <code>DEFAULT_FRAME_ALIGNMENT</code> <code>theme</code> <code>Theme</code> <p>The appearance of the frameline. Choose one the predefined themes from hemline.themes or build your own instance of hemline.themes.Theme.</p> <code>DEFAULT_THEME</code> <code>horizontal_padding</code> <code>int</code> <p>The number of whitespace characters used for horizontal padding.</p> <code>DEFAULT_HORIZONTAL_PADDING</code> <code>vertical_padding</code> <code>int</code> <p>The number of blank lines used for vertical padding.</p> <code>DEFAULT_VERTICAL_PADDING</code> <code>outer_width</code> <code>int</code> <p>The outer width of the Frame, including horizontal padding and the frame itself.</p> <code>DEFAULT_OUTER_WIDTH</code> <code>container_width</code> <code>int | None</code> <p>The width of an imgainary container for the frame, resorts to the width of the terminal, if none is provided.</p> <code>None</code> <code>colorize</code> <code>Callable[[str], str] | None</code> <p>A function to apply your custom colorization. Must take a string return the colorized string. Passing this will override any value provided to <code>color</code> parameter.</p> <code>None</code> <code>wrap</code> <code>Callable[[str, int], str]</code> <p>A function to apply your custom wrapping logic. Must take a string and the width and return the wrapped string.</p> <code>DEFAULT_TEXT_WRAP</code> Source code in <code>hemline/frame.py</code> <pre><code>def __init__(\n    self,\n    color: Color | None = None,\n    text_alignment: Alignment = DEFAULT_TEXT_ALIGNMENT,\n    alignment: Alignment = DEFAULT_FRAME_ALIGNMENT,\n    theme: Theme = DEFAULT_THEME,\n    horizontal_padding: int = DEFAULT_HORIZONTAL_PADDING,\n    vertical_padding: int = DEFAULT_VERTICAL_PADDING,\n    outer_width: int = DEFAULT_OUTER_WIDTH,\n    container_width: int | None = None,\n    colorize: Callable[[str], str] | None = None,\n    wrap: Callable[[str, int], str] = DEFAULT_TEXT_WRAP,\n) -&gt; None:\n    \"\"\"\n    Parameters:\n        color: The color of the frame. Use this for colorization out\n            of the box. For more sophistaced options, you can pass a\n            colorization function to the parameter `colorize`.\n\n        text_alignment: The alignment of the text inside the frame.\n\n        alignment: The alignment of the frame inside the container.\n\n        theme: The appearance of the frameline. Choose one the predefined\n            themes from hemline.themes or build your own instance of\n            hemline.themes.Theme.\n\n        horizontal_padding: The number of whitespace characters used for\n            horizontal padding.\n\n        vertical_padding: The number of blank lines used for vertical\n            padding.\n\n        outer_width: The outer width of the Frame, including horizontal\n            padding and the frame itself.\n\n        container_width: The width of an imgainary container for the frame,\n            resorts to the width of the terminal, if none is provided.\n\n        colorize: A function to apply your custom colorization. Must take a\n            string return the colorized string. Passing this will override\n            any value provided to `color` parameter.\n\n        wrap: A function to apply your custom wrapping logic. Must take a\n            string and the width and return the wrapped string.\n    \"\"\"\n    self.text_alignment = text_alignment\n    self.alignment = alignment\n    self.theme = theme\n    self.horizontal_padding = horizontal_padding\n    self.vertical_padding = vertical_padding\n    self.outer_width = outer_width\n    self.container_width = container_width\n    if not color:\n        self.colorize = colorize\n    else:\n        self.colorize = colorize or partial(default_colorize, color=color)\n    self.wrap = wrap\n</code></pre>"},{"location":"#hemline.frame.Frame.format","title":"hemline.frame.Frame.format","text":"<pre><code>format(text)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to frame.</p> required Source code in <code>hemline/frame.py</code> <pre><code>def format(self, text: str) -&gt; str:\n    \"\"\"\n    Parameters:\n        text: The text to frame.\n    \"\"\"\n    text = self.wrap(text, self.text_width)\n    raw_lines = text.split(\"\\n\")\n    raw_lines = (\n        [\"\"] * self.vertical_padding\n        + raw_lines\n        + [\"\"] * self.vertical_padding\n    )\n    top_line = self._border_line(\n        left=self.theme.top_left,\n        right=self.theme.top_right,\n    )\n    bottom_line = self._border_line(\n        left=self.theme.bottom_left,\n        right=self.theme.bottom_right,\n    )\n    framed_lines = [self._framed_line(text=line) for line in raw_lines]\n    return \"\\n\".join([top_line] + framed_lines + [bottom_line])\n</code></pre>"},{"location":"#theme","title":"Theme","text":""},{"location":"#hemline.themes","title":"hemline.themes","text":""},{"location":"#hemline.themes.Theme","title":"Theme","text":"Source code in <code>hemline/themes.py</code> <pre><code>class Theme:\n    def __init__(\n        self,\n        horizontal: SingleCharacter,\n        vertical: SingleCharacter,\n        top_left: SingleCharacter,\n        top_right: SingleCharacter,\n        bottom_left: SingleCharacter,\n        bottom_right: SingleCharacter,\n    ) -&gt; None:\n        \"\"\"\n        Parameters:\n            horizontal: single character string.\n            vertical: single character string.\n            top_left: single character string.\n            top_right: single character string.\n            bottom_left: single character string.\n            bottom_right: single character string.\n        \"\"\"\n        self.horizontal = horizontal\n        self.vertical = vertical\n        self.top_left = top_left\n        self.top_right = top_right\n        self.bottom_left = bottom_left\n        self.bottom_right = bottom_right\n        for field in [\n            \"horizontal\",\n            \"vertical\",\n            \"top_left\",\n            \"top_right\",\n            \"bottom_left\",\n            \"bottom_right\",\n        ]:\n            border = self.__validate_border(field)\n            setattr(self, field, border)\n\n    def __validate_border(self, field: str) -&gt; str:\n        border = getattr(self, field)\n        if not isinstance(border, str):\n            raise TypeError(f\"Delimiter border `{field}` must be a string.\")\n\n        length = len(border)\n        if not length == 1:\n            raise ValueError(\n                \"Delimiters must be single characters. \"\n                f'`{field}` (\"{border}\") has {length}.'\n            )\n        return border\n</code></pre>"},{"location":"#hemline.themes.Theme.__init__","title":"__init__","text":"<pre><code>__init__(\n    horizontal,\n    vertical,\n    top_left,\n    top_right,\n    bottom_left,\n    bottom_right,\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>horizontal</code> <code>SingleCharacter</code> <p>single character string.</p> required <code>vertical</code> <code>SingleCharacter</code> <p>single character string.</p> required <code>top_left</code> <code>SingleCharacter</code> <p>single character string.</p> required <code>top_right</code> <code>SingleCharacter</code> <p>single character string.</p> required <code>bottom_left</code> <code>SingleCharacter</code> <p>single character string.</p> required <code>bottom_right</code> <code>SingleCharacter</code> <p>single character string.</p> required Source code in <code>hemline/themes.py</code> <pre><code>def __init__(\n    self,\n    horizontal: SingleCharacter,\n    vertical: SingleCharacter,\n    top_left: SingleCharacter,\n    top_right: SingleCharacter,\n    bottom_left: SingleCharacter,\n    bottom_right: SingleCharacter,\n) -&gt; None:\n    \"\"\"\n    Parameters:\n        horizontal: single character string.\n        vertical: single character string.\n        top_left: single character string.\n        top_right: single character string.\n        bottom_left: single character string.\n        bottom_right: single character string.\n    \"\"\"\n    self.horizontal = horizontal\n    self.vertical = vertical\n    self.top_left = top_left\n    self.top_right = top_right\n    self.bottom_left = bottom_left\n    self.bottom_right = bottom_right\n    for field in [\n        \"horizontal\",\n        \"vertical\",\n        \"top_left\",\n        \"top_right\",\n        \"bottom_left\",\n        \"bottom_right\",\n    ]:\n        border = self.__validate_border(field)\n        setattr(self, field, border)\n</code></pre>"},{"location":"#hemline.themes.factory","title":"factory","text":"<pre><code>factory(character, corner=None)\n</code></pre> <p>Convenience factory for a Theme built from one character, optionally specifying the character used for corners.</p> <p>Parameters:</p> Name Type Description Default <code>character</code> <code>SingleCharacter</code> <p>The character to use for the frameline. Must be a single-character string.</p> required <code>corner</code> <code>SingleCharacter | None</code> <p>The character to use for the corners, resorts to <code>character</code> if none is provided. Must be a single-character string.</p> <code>None</code> Source code in <code>hemline/themes.py</code> <pre><code>def factory(\n    character: SingleCharacter, corner: SingleCharacter | None = None\n) -&gt; Theme:\n    \"\"\"Convenience factory for a Theme built from one character, optionally\n    specifying the character used for corners.\n\n    Parameters:\n        character: The character to use for the frameline. Must be a\n            single-character string.\n\n        corner: The character to use for the corners, resorts to `character` if\n            none is provided. Must be a single-character string.\n    \"\"\"\n    corner = corner or character\n\n    return Theme(\n        horizontal=character,\n        vertical=character,\n        top_left=corner,\n        top_right=corner,\n        bottom_left=corner,\n        bottom_right=corner,\n    )\n</code></pre>"},{"location":"#hemline.themes.Theme","title":"hemline.themes.Theme","text":"Source code in <code>hemline/themes.py</code> <pre><code>class Theme:\n    def __init__(\n        self,\n        horizontal: SingleCharacter,\n        vertical: SingleCharacter,\n        top_left: SingleCharacter,\n        top_right: SingleCharacter,\n        bottom_left: SingleCharacter,\n        bottom_right: SingleCharacter,\n    ) -&gt; None:\n        \"\"\"\n        Parameters:\n            horizontal: single character string.\n            vertical: single character string.\n            top_left: single character string.\n            top_right: single character string.\n            bottom_left: single character string.\n            bottom_right: single character string.\n        \"\"\"\n        self.horizontal = horizontal\n        self.vertical = vertical\n        self.top_left = top_left\n        self.top_right = top_right\n        self.bottom_left = bottom_left\n        self.bottom_right = bottom_right\n        for field in [\n            \"horizontal\",\n            \"vertical\",\n            \"top_left\",\n            \"top_right\",\n            \"bottom_left\",\n            \"bottom_right\",\n        ]:\n            border = self.__validate_border(field)\n            setattr(self, field, border)\n\n    def __validate_border(self, field: str) -&gt; str:\n        border = getattr(self, field)\n        if not isinstance(border, str):\n            raise TypeError(f\"Delimiter border `{field}` must be a string.\")\n\n        length = len(border)\n        if not length == 1:\n            raise ValueError(\n                \"Delimiters must be single characters. \"\n                f'`{field}` (\"{border}\") has {length}.'\n            )\n        return border\n</code></pre>"},{"location":"#hemline.themes.Theme.__init__","title":"__init__","text":"<pre><code>__init__(\n    horizontal,\n    vertical,\n    top_left,\n    top_right,\n    bottom_left,\n    bottom_right,\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>horizontal</code> <code>SingleCharacter</code> <p>single character string.</p> required <code>vertical</code> <code>SingleCharacter</code> <p>single character string.</p> required <code>top_left</code> <code>SingleCharacter</code> <p>single character string.</p> required <code>top_right</code> <code>SingleCharacter</code> <p>single character string.</p> required <code>bottom_left</code> <code>SingleCharacter</code> <p>single character string.</p> required <code>bottom_right</code> <code>SingleCharacter</code> <p>single character string.</p> required Source code in <code>hemline/themes.py</code> <pre><code>def __init__(\n    self,\n    horizontal: SingleCharacter,\n    vertical: SingleCharacter,\n    top_left: SingleCharacter,\n    top_right: SingleCharacter,\n    bottom_left: SingleCharacter,\n    bottom_right: SingleCharacter,\n) -&gt; None:\n    \"\"\"\n    Parameters:\n        horizontal: single character string.\n        vertical: single character string.\n        top_left: single character string.\n        top_right: single character string.\n        bottom_left: single character string.\n        bottom_right: single character string.\n    \"\"\"\n    self.horizontal = horizontal\n    self.vertical = vertical\n    self.top_left = top_left\n    self.top_right = top_right\n    self.bottom_left = bottom_left\n    self.bottom_right = bottom_right\n    for field in [\n        \"horizontal\",\n        \"vertical\",\n        \"top_left\",\n        \"top_right\",\n        \"bottom_left\",\n        \"bottom_right\",\n    ]:\n        border = self.__validate_border(field)\n        setattr(self, field, border)\n</code></pre>"},{"location":"#hemline.themes.single","title":"hemline.themes.single  <code>module-attribute</code>","text":"<pre><code>single = Theme(\n    horizontal=\"\u2500\",\n    vertical=\"\u2502\",\n    top_left=\"\u250c\",\n    top_right=\"\u2510\",\n    bottom_left=\"\u2514\",\n    bottom_right=\"\u2518\",\n)\n</code></pre>"},{"location":"#hemline.themes.double","title":"hemline.themes.double  <code>module-attribute</code>","text":"<pre><code>double = Theme(\n    horizontal=\"\u2550\",\n    vertical=\"\u2551\",\n    top_left=\"\u2554\",\n    top_right=\"\u2557\",\n    bottom_left=\"\u255a\",\n    bottom_right=\"\u255d\",\n)\n</code></pre>"},{"location":"#hemline.themes.dotted","title":"hemline.themes.dotted  <code>module-attribute</code>","text":"<pre><code>dotted = factory('\u00b7')\n</code></pre>"},{"location":"#hemline.themes.none","title":"hemline.themes.none  <code>module-attribute</code>","text":"<pre><code>none = factory(' ')\n</code></pre>"},{"location":"#hemline.themes.factory","title":"hemline.themes.factory","text":"<pre><code>factory(character, corner=None)\n</code></pre> <p>Convenience factory for a Theme built from one character, optionally specifying the character used for corners.</p> <p>Parameters:</p> Name Type Description Default <code>character</code> <code>SingleCharacter</code> <p>The character to use for the frameline. Must be a single-character string.</p> required <code>corner</code> <code>SingleCharacter | None</code> <p>The character to use for the corners, resorts to <code>character</code> if none is provided. Must be a single-character string.</p> <code>None</code> Source code in <code>hemline/themes.py</code> <pre><code>def factory(\n    character: SingleCharacter, corner: SingleCharacter | None = None\n) -&gt; Theme:\n    \"\"\"Convenience factory for a Theme built from one character, optionally\n    specifying the character used for corners.\n\n    Parameters:\n        character: The character to use for the frameline. Must be a\n            single-character string.\n\n        corner: The character to use for the corners, resorts to `character` if\n            none is provided. Must be a single-character string.\n    \"\"\"\n    corner = corner or character\n\n    return Theme(\n        horizontal=character,\n        vertical=character,\n        top_left=corner,\n        top_right=corner,\n        bottom_left=corner,\n        bottom_right=corner,\n    )\n</code></pre>"},{"location":"#other","title":"Other","text":""},{"location":"#hemline.alignment.Alignment","title":"hemline.alignment.Alignment  <code>module-attribute</code>","text":"<pre><code>Alignment = Literal['left', 'center', 'right']\n</code></pre>"},{"location":"#hemline.colors","title":"hemline.colors","text":""},{"location":"#hemline.colors.Color","title":"Color","text":"<p>               Bases: <code>StrEnum</code></p> Source code in <code>hemline/colors.py</code> <pre><code>class Color(StrEnum):\n    BLACK = \"\\033[0;30m\"\n    DARK_RED = \"\\033[0;31m\"\n    DARK_GREEN = \"\\033[0;32m\"\n    BROWN = \"\\033[1;33m\"\n    DARK_BLUE = \"\\033[0;34m\"\n    PURPLE = \"\\033[0;35m\"\n    TEAL = \"\\033[0;36m\"\n    LIGHT_GRAY = \"\\033[0;37m\"\n    DARK_GRAY = \"\\033[1;90m\"\n    RED = \"\\033[0;92m\"\n    GREEN = \"\\033[0;92m\"\n    YELLOW = \"\\033[;93m\"\n    BLUE = \"\\033[0;94m\"\n    MAGENTA = \"\\033[;95m\"\n    CYAN = \"\\033[0;96m\"\n    WHITE = \"\\033[;97m\"\n    RESET = \"\\033[0m\"\n</code></pre>"},{"location":"#hemline.colors.Color.BLACK","title":"BLACK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BLACK = '\\x1b[0;30m'\n</code></pre>"},{"location":"#hemline.colors.Color.BLUE","title":"BLUE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BLUE = '\\x1b[0;94m'\n</code></pre>"},{"location":"#hemline.colors.Color.BROWN","title":"BROWN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BROWN = '\\x1b[1;33m'\n</code></pre>"},{"location":"#hemline.colors.Color.CYAN","title":"CYAN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CYAN = '\\x1b[0;96m'\n</code></pre>"},{"location":"#hemline.colors.Color.DARK_BLUE","title":"DARK_BLUE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DARK_BLUE = '\\x1b[0;34m'\n</code></pre>"},{"location":"#hemline.colors.Color.DARK_GRAY","title":"DARK_GRAY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DARK_GRAY = '\\x1b[1;90m'\n</code></pre>"},{"location":"#hemline.colors.Color.DARK_GREEN","title":"DARK_GREEN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DARK_GREEN = '\\x1b[0;32m'\n</code></pre>"},{"location":"#hemline.colors.Color.DARK_RED","title":"DARK_RED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DARK_RED = '\\x1b[0;31m'\n</code></pre>"},{"location":"#hemline.colors.Color.GREEN","title":"GREEN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GREEN = '\\x1b[0;92m'\n</code></pre>"},{"location":"#hemline.colors.Color.LIGHT_GRAY","title":"LIGHT_GRAY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LIGHT_GRAY = '\\x1b[0;37m'\n</code></pre>"},{"location":"#hemline.colors.Color.MAGENTA","title":"MAGENTA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MAGENTA = '\\x1b[;95m'\n</code></pre>"},{"location":"#hemline.colors.Color.PURPLE","title":"PURPLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PURPLE = '\\x1b[0;35m'\n</code></pre>"},{"location":"#hemline.colors.Color.RED","title":"RED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RED = '\\x1b[0;92m'\n</code></pre>"},{"location":"#hemline.colors.Color.RESET","title":"RESET  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RESET = '\\x1b[0m'\n</code></pre>"},{"location":"#hemline.colors.Color.TEAL","title":"TEAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TEAL = '\\x1b[0;36m'\n</code></pre>"},{"location":"#hemline.colors.Color.WHITE","title":"WHITE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WHITE = '\\x1b[;97m'\n</code></pre>"},{"location":"#hemline.colors.Color.YELLOW","title":"YELLOW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>YELLOW = '\\x1b[;93m'\n</code></pre>"},{"location":"#hemline.colors.default_colorize","title":"default_colorize","text":"<pre><code>default_colorize(text, color)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to colorize</p> required <code>color</code> <code>Color</code> <p>The Color to use.</p> required Source code in <code>hemline/colors.py</code> <pre><code>def default_colorize(text: str, color: Color) -&gt; str:\n    \"\"\"\n    Parameters:\n        text: The text to colorize\n\n        color: The Color to use.\n    \"\"\"\n    return f\"{color}{text}{Color.RESET}\"\n</code></pre>"},{"location":"#hemline.defaults","title":"hemline.defaults","text":""},{"location":"#hemline.defaults.DEFAULT_FRAME_ALIGNMENT","title":"DEFAULT_FRAME_ALIGNMENT  <code>module-attribute</code>","text":"<pre><code>DEFAULT_FRAME_ALIGNMENT = 'center'\n</code></pre>"},{"location":"#hemline.defaults.DEFAULT_HORIZONTAL_PADDING","title":"DEFAULT_HORIZONTAL_PADDING  <code>module-attribute</code>","text":"<pre><code>DEFAULT_HORIZONTAL_PADDING = 4\n</code></pre>"},{"location":"#hemline.defaults.DEFAULT_OUTER_WIDTH","title":"DEFAULT_OUTER_WIDTH  <code>module-attribute</code>","text":"<pre><code>DEFAULT_OUTER_WIDTH = (\n    88 + 2 * DEFAULT_HORIZONTAL_PADDING + 2\n)\n</code></pre>"},{"location":"#hemline.defaults.DEFAULT_TEXT_ALIGNMENT","title":"DEFAULT_TEXT_ALIGNMENT  <code>module-attribute</code>","text":"<pre><code>DEFAULT_TEXT_ALIGNMENT = 'left'\n</code></pre>"},{"location":"#hemline.defaults.DEFAULT_TEXT_WRAP","title":"DEFAULT_TEXT_WRAP  <code>module-attribute</code>","text":"<pre><code>DEFAULT_TEXT_WRAP = wrap\n</code></pre>"},{"location":"#hemline.defaults.DEFAULT_THEME","title":"DEFAULT_THEME  <code>module-attribute</code>","text":"<pre><code>DEFAULT_THEME = single\n</code></pre>"},{"location":"#hemline.defaults.DEFAULT_VERTICAL_PADDING","title":"DEFAULT_VERTICAL_PADDING  <code>module-attribute</code>","text":"<pre><code>DEFAULT_VERTICAL_PADDING = 1\n</code></pre>"},{"location":"use/","title":"Styling the Frame","text":""},{"location":"use/#predefined-themes","title":"Predefined Themes","text":"<p>The characters defining the edges and corners of the frame make a theme. <code>hemline.themes</code> provides four predefined themes, with self-explanatory names:</p> <ul> <li><code>single</code>  (The default theme)</li> <li><code>double</code></li> <li><code>dotted</code></li> <li><code>none</code></li> </ul> <pre><code>from hemline.themes import double\n\nframe = Frame(theme=double)\ntext = \"This is some text\"\nframe.format(text)\n</code></pre>"},{"location":"use/#custom-theme","title":"Custom Theme","text":"<p>You can define a custom theme by instancing a <code>Theme</code>. If you want to create a theme based on a single border character, you can use the <code>factory</code> for your convenience.</p>"},{"location":"use/#colorized-frames","title":"Colorized Frames","text":"<p>If you want the frame in a certain color, you can pass an instance of <code>colors.Color</code> to the frame's constructor.</p> <p>If you need more flexibility, you can also pass a colorization function into the constructor of <code>Frame</code>. This function must accept a string and the color parameter you pass in the <code>color</code> argument of the <code>Frame</code>'s constructor, and return the colorized version of the string.</p>"},{"location":"use/#wrapping-text-inside-the-frame","title":"Wrapping Text Inside The Frame","text":"<p>Text inside the frame is wrapped by keeping paragraphs intact (a paragraph being defined as an occurrence of two line breaks in a row), but condensing line breaks.</p> <p>If you want to apply a different way of wrapping the text, you can define a custom wrapping function and inject it into the constructor of <code>Frame</code> by passing it through the <code>wrap</code> parameter. The wrapping function must have the function signature <code>Callable[[str, int], str]</code>, with the first parameter being the input string, and the second parameter being the target width.</p> <p>Under the hood, <code>hemline</code> uses the <code>tamal</code> library for wrapping. It allows for a lot of customization. If you want to change specifics in the wrapping method, you might find what you need there. Here is one example:</p> <pre><code>from tamal import wrap\n\ndef custom_wrapping(text: str, width: int) -&gt; str:\n    return wrap(text, width, paragraph=\"\\n\", soft_hyphen=\"+++\")\n\nframe_with_custom_wrapping = Frame(wrap=custom_wrapping)\n</code></pre> <p>The example above will treat linebreaks as paragraph boundaries, i.e. it will treat them as hard linebreaks.</p>"}]}